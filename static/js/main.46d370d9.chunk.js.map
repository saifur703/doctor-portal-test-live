{"version":3,"sources":["Components/Home/Home.js","Components/DoctorPanel/DoctorPanel.js","Components/DatePicker/DatePicker.js","Components/AppointmentForm/AppointmentForm.js","Components/ServiceList/ServiceList.js","Components/Appointment/Appointment.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","src","alt","DoctorPanel","path","exact","DatePicker","props","onChange","d","handleDate","value","date","minDate","Date","maxDate","minDetail","AppointmentForm","action","type","name","placeholder","ServiceList","Appointment","useState","setDate","Header","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46d370d9.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  return (\n    <div className='p-5 home-page'>\n      <div className='container'>\n        <div className='row'>\n          <div className='col-md-6 pt-5 text-left'>\n            <h1 className='text-info'>Your New Smile!</h1>\n            <h1 className='text-info'>Starts Here</h1>\n            <p className='text-secondary'>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore,\n              sequi?\n            </p>\n            <Link to='/doctorPanel'>\n              <button className='btn btn-info'>Doctor Panel</button>\n            </Link>\n          </div>\n\n          <div className='col-md-6'>\n            <img src='https://via.placeholder.com/500x300' alt='' />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nconst DoctorPanel = () => {\n  return (\n    <div className='doctor-panel'>\n      <Router>\n        <Switch>\n          <Route path='/doctorPanel/dashboard'>\n            <h2>Doctor Panel - Dashboard</h2>\n          </Route>\n\n          <Route path='/doctorPanel/appointmentList'>\n            <h2>Appointment List</h2>\n          </Route>\n\n          <Route exact path='/doctorPanel'>\n            <h2>Dashboard</h2>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default DoctorPanel;\n","import React from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n\nconst DatePicker = (props) => {\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='col-md-6'>\n          <h2>Calender</h2>\n          <Calendar\n            onChange={(d) => props.handleDate(d)}\n            value={props.date}\n            minDate={new Date()}\n            maxDate={new Date(2020, 12, 31)}\n            minDetail={'year'}\n          />\n        </div>\n\n        <div className='col-md-6 d-flex align-items-center'>\n          <img src='https://via.placeholder.com/500x300' alt='' />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DatePicker;\n","import React from 'react';\n\nconst AppointmentForm = () => {\n  return (\n    <div className='col-md-8 offset-md-2'>\n      <h2>Appointment Form</h2>\n\n      <form action=''>\n        <input\n          className='form-control mb-2'\n          type='text'\n          name='name'\n          placeholder='Your Name here...'\n        />\n\n        <input\n          className='form-control mb-2'\n          type='email'\n          name='email'\n          placeholder='Your Email here...'\n        />\n        <input\n          className='form-control mb-2'\n          type='tel'\n          name='tel'\n          placeholder='Your Phone Number...'\n        />\n        <input\n          className='btn btn-info form-control'\n          type='submit'\n          value='Submit'\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default AppointmentForm;\n","import React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AppointmentForm from '../AppointmentForm/AppointmentForm';\n\nconst ServiceList = () => {\n  return (\n    <div>\n      <h2>Service List</h2>\n      <AppointmentForm></AppointmentForm>\n    </div>\n  );\n};\n\nexport default ServiceList;\n","import React, { useState } from 'react';\nimport DatePicker from '../DatePicker/DatePicker';\nimport ServiceList from '../ServiceList/ServiceList';\n\nconst Appointment = () => {\n  const [date, setDate] = useState(new Date());\n\n  const handleDate = (d) => {\n    setDate(d);\n  };\n  return (\n    <div className='container'>\n      <h2 className='text-info'>Appointment</h2>\n\n      <DatePicker date={date} handleDate={handleDate}></DatePicker>\n\n      <ServiceList date={date}></ServiceList>\n    </div>\n  );\n};\n\nexport default Appointment;\n","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='col-md-6 text-left'>\n          <div className='logo'>\n            <h1>\n              <a href='/'>Logo</a>\n            </h1>\n          </div>\n        </div>\n        <div className='col-md-6 text-right'>\n          <div className='mainmenu'>\n            <ul>\n              <li>\n                <a href='/'>Home</a>\n              </li>\n              <li>\n                <a href='/doctorPanel'>Doctor panel</a>\n              </li>\n              <li>\n                <a href='/getAppointment'>Appointment</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from './Components/Home/Home';\nimport DoctorPanel from './Components/DoctorPanel/DoctorPanel';\nimport Appointment from './Components/Appointment/Appointment';\nimport Header from './Components/Header/Header';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header></Header>\n      <Router>\n        <Switch>\n          <Route path='/doctorPanel'>\n            <DoctorPanel></DoctorPanel>\n          </Route>\n\n          <Route path='/getAppointment'>\n            <Appointment></Appointment>\n          </Route>\n\n          <Route path='/home'>\n            <Home></Home>\n          </Route>\n\n          <Route exact path='/'>\n            <Home></Home>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}